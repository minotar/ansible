# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
worker_rlimit_nofile 100480;

events {
    worker_connections 122880;
    multi_accept on;
    use epoll;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    log_format rt_cache '[$time_local] $upstream_cache_status - "$request" $status';

    access_log off;


    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay off;
    keepalive_timeout 40;
    types_hash_max_size 2048;
    server_tokens off;


    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    ##
    # Gzip Settings
    ##
    gzip on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
    gzip_http_version  1.0;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;

    proxy_cache_path  /tmp/cache levels=1:2 keys_zone=minotar:100m;
    proxy_buffering on;

    upstream imgd {
        server 127.0.0.1:9999;
    }


    server {
        listen 80 default_server;

        server_name minotar.net;
        access_log  /var/log/nginx/access.log;
        access_log /var/log/nginx/cache.log rt_cache;
        error_log /var/log/nginx/error.log;

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'M-Server' $hostname;

        root /srv/www/minotar.net/public_html;
        index index.html;

        location / {
            try_files $uri $uri/ @imgd;
        }

        location @imgd {
            proxy_cache minotar;
            proxy_pass http://104.131.78.30;

            proxy_cache_valid 200 302 2h;
            proxy_cache_valid 500 502 4h;
            proxy_cache_use_stale timeout updating error;

            add_header N-Cache $upstream_cache_status;

            proxy_http_version 1.1;
            proxy_read_timeout 6s;

            #proxy_set_header        Host            minotar.net;
            #proxy_set_header        X-Real-IP       $remote_addr;
            #proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
    server {
        listen 80;
        server_name www.minotar.net;

        rewrite ^ http://minotar.net$request_uri? permanent;
    }

    server {
        listen 80;
        server_name $hostname;

        location /status {
            stub_status on;
            access_log   off;
        }
    }
}
