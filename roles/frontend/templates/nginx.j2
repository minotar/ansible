# Generated by Ansible

# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user {{ nginx_user }};
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
worker_rlimit_nofile 2048;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log off;
    server_tokens off;

    ##
    # Basic Settings
    ##

    sendfile on;

    tcp_nopush {{ nginx_nopush }};
    tcp_nodelay {{ nginx_nodelay }};

    keepalive_timeout {{ nginx_keepalive_timeout }};
    client_header_timeout {{ nginx_client_header_timeout }};
    send_timeout {{ nginx_send_timeout }};
    reset_timedout_connection {{ nginx_reset_timedout_connection }};

    types_hash_max_size {{ nginx_types_hash_max_size }};
    client_header_buffer_size {{ nginx_client_header_buffer_size }};
    large_client_header_buffers {{ nginx_large_client_header_buffers }};

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

{% if nginx_gzip %}
 
    ##
    # Gzip Settings
    ##
    gzip on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
    gzip_http_version  1.0;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;

{% endif %}

    # Idea being here that we don't need to cache many file descriptors, but we should cache them for a while
    open_file_cache          max=50 inactive=1h;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 1;
    open_file_cache_errors   off;


    server {
        listen {{ nginx_server_port }} default_server;
        server_name {{ nginx_server_name }};
        root {{ nginx_server_root }};

        access_log  {{ nginx_server_accesslog }};
        error_log {{ nginx_server_errorlog }};

        add_header 'Access-Control-Allow-Origin' '*';

        index index.html;

        # Cache homepage for 5 mins, better than nothing, but still don't want to wait too long for page updates.
        location = /index.html {
            expires 5m;
            add_header Cache-Control "public";
        }

        # Cache robots file for 1 day
        location = /robots.txt {
            expires 1d;
            add_header Cache-Control "public";
        }

        # This should only be used by browsers which check in the root of the domain.
        # Ideally we should use the favicon on the assets subfolder
        location /favicon.ico {
            expires 8d;
            add_header Cache-Control "public";
        }

        # Everything in the assets folder should have a long cache set
        location /assets/ {
            expires 1y;
            add_header Cache-Control "public";
        }

        # Allow cache busting for the assets subfolder
        location ~* /assets/(.+)\.(?:\d+)\.(js|css|png|jpg|jpeg|gif|ico)$ {
            try_files $uri /assets/$1.$2;
        }

        location /stats {
            stub_status on;
            access_log   off;
        }
    }
}
